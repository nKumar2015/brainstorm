use crate::ast::{Expression, Program, Statement, Operator};

grammar;

pub Program : Program = {
    <statements:Statement*> => Program::Body{statements}
}

pub Statement: Statement = {
    <name:Identifier> "=" <rhs:Expression> ";"
        => Statement::Assignment{name, rhs},
    
    <name:Identifier> "+=" <rhs:Expression> ";" 
        => Statement::OperatorAssignment{name, operator: Operator::Plus, rhs},
    
    <expression:Expression> ";" => Statement::Expression{expression},
    
    "while" "(" <condition:Expression> ")" "{" <statements:Statement*> "}" 
        => Statement::While{condition, statements},
    
    "for" "(" <control_var:Identifier> "=" <initial:Expression> ";"
    <condition:Expression> ";" <iterate_var:Identifier> <operator:Operator> <iterate_exp:Expression>")" "{"
    <statements:Statement*> "}" 
        => Statement::For{control_var, initial, condition, 
                          iterate_var, operator, iterate_exp, 
                          statements},

    "if" "(" <condition:Expression> ")" "{" <statements:Statement*> "}" 
        => Statement::If{condition, statements, else_statements: None},
    
    "if" "(" <condition:Expression> ")" "{" <statements:Statement*> "}" 
        "else" "{" <else_statements:Statement*> "}" 
        => Statement::If{condition, statements, else_statements: Some(else_statements)}

}

pub Expression: Expression = {
    #[precedence(level="0")]
    <v:IntLiteral> => Expression::Int{v},
    <name:Identifier> => Expression::Identifier{name},
    <s:StringLiteral> => Expression::StringLiteral{s},
    <b:BooleanLiteral> => Expression::Boolean{b},
    <f:FloatLiteral> => Expression::Float{f},
    <c:CharacterLiteral> => Expression::Character{c},

    #[precedence(level="1")] #[assoc(side="left")]
    <lhs:Expression> "==" <rhs:Expression> 
        => Expression::Comparison{lhs: Box::new(lhs), 
                                  rhs: Box::new(rhs), 
                                  operator: Operator::Equal},

    <lhs:Expression> "<" <rhs:Expression> 
        => Expression::Comparison{lhs: Box::new(lhs), 
                                  rhs: Box::new(rhs), 
                                  operator: Operator::LessThan},

    <lhs:Expression> ">" <rhs:Expression> 
        => Expression::Comparison{lhs: Box::new(lhs), 
                                  rhs: Box::new(rhs), 
                                  operator: Operator::GreaterThan},

    <function:Identifier> "(" <arg:Expression> ")" 
        => Expression::Call{function, args: vec![arg]},

    <lhs:Expression> "+" <rhs:Expression>
        => Expression::Operation{lhs: Box::new(lhs),
                                 rhs: Box::new(rhs),
                                 operator: Operator::Plus},

    <lhs:Expression> "-" <rhs:Expression>
        => Expression::Operation{lhs: Box::new(lhs),
                                 rhs: Box::new(rhs),
                                 operator: Operator::Minus},

    <lhs:Expression> "/" <rhs:Expression>
        => Expression::Operation{lhs: Box::new(lhs),
                                 rhs: Box::new(rhs),
                                 operator: Operator::Divide},

    <lhs:Expression> "*" <rhs:Expression>
        => Expression::Operation{lhs: Box::new(lhs),
                                 rhs: Box::new(rhs),
                                 operator: Operator::Times}
}

Operator: Operator = {
    <s:"+="> => Operator::Plus,
    <s:"-="> => Operator::Minus,
    <s:"*="> => Operator::Times,
    <s:"/="> => Operator::Divide,
    <s:"+"> => Operator::Plus,
    <s:"-"> => Operator::Minus,
    <s:"*"> => Operator::Times,
    <s:"/"> => Operator::Divide,
}

Identifier: String = {
    <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> => s.to_string(),
}

IntLiteral: i32 = {
    <s:r"[0-9]+"> => s.parse().unwrap(),
}

FloatLiteral: f64 = {
    <s:r"[0-9]+[.][0-9]+"> => s.parse().unwrap(),
}

StringLiteral: String = {
    <s:r#""[^\"]*""#> => s.replace('"', "").to_string(),
}

BooleanLiteral: bool = {
    <s:"true"> => true,
    <s:"false"> => false,
}

CharacterLiteral: char = {
    <s:r#"'[^\']'"#> => s.replace('\'', "").chars().next().expect("invalid char!"),
}

match {
    r"//[^\n\r]*[\n\r]*" => {},
    r"\s*" => {},
    _,
}