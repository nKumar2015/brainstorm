use crate::ast::{
    Expression, 
    Program, 
    Statement, 
    Operator,
    ListItem, 
    ForLoop,
    IfBranch,
};

grammar;

pub Program: Program = {
    <statements:Statement*> => Program::Body{statements}
}

pub Statement: Statement = {
    "import" <path:StringLiteral> ";" => Statement::Import{path},

    <lhs:Expression> "=" <rhs:Expression> ";"
        => Statement::Assignment{lhs, rhs},
    
    <name:Identifier> <operator:AssignmentOperator> <rhs:Expression> ";" 
        => Statement::OperatorAssignment{name, operator, rhs},
        
    <params:ForLoop> => Statement::For{params},
    <params:IfBranch> => Statement::If{params}, 

    "while" "(" <condition:Expression> ")" "{" <statements:Statement*> "}" 
        => Statement::While{condition, statements},
    
    <expression:Expression> ";" => Statement::Expression{expression},

    "fn" <name:Identifier> "(" <arguments:FunctionDefArgs> ")" 
    "{" <statements:Statement*> "return" <return_expression:Expression> ";" "}"
        => Statement::FunctionDefinition{name, arguments, statements, return_expression: Some(return_expression)},

    "fn" <name:Identifier> "(" <arguments:FunctionDefArgs> ")" 
    "{" <statements:Statement*> "}"
        => Statement::FunctionDefinition{name, arguments, statements, return_expression: None}
}

pub FunctionDefArgs: Vec<String> = {
    () => vec![],
    <argument:Identifier> => vec![argument],
    <argument:Identifier> "," <tail:FunctionDefArgs> => {
        let mut args = tail.clone();
        args.insert(0, argument);

        args
    }
}

pub IfBranch: IfBranch = {
    "if" "(" <condition:Expression> ")" 
    "{" <statements:Statement*> "}" 
    "else" "{" <else_statements:Statement*> "}" 
        => IfBranch{condition, 
                    statements, 
                    else_statements: Some(else_statements) },
    
    "if" "(" <condition:Expression> ")" 
    "{" <statements:Statement*> "}" 
        => IfBranch{condition, 
                    statements, 
                    else_statements: None }
    
}

pub ForLoop: ForLoop = {
    "for" "(" <loop_var:Identifier> "in" <iterate_expression:Expression> ")" 
    "{" <statements:Statement*> "}"
        => ForLoop{loop_var, iterate_expression, statements}
}

pub Expression: Expression = {
    #[precedence(level="0")]
    <v:IntLiteral>       => Expression::Int{v},
    <name:Identifier>    => Expression::Identifier{name},
    <s:StringLiteral>    => Expression::String{s},
    <b:BooleanLiteral>   => Expression::Boolean{b},
    <f:FloatLiteral>     => Expression::Float{f},
    <c:CharacterLiteral> => Expression::Character{c},

    "[" <items:ExpressionList> "]" => Expression::List{items},

    #[precedence(level="1")] #[assoc(side="left")]
    <lhs:Expression> <operator:Operator> <rhs:Expression>
        => Expression::Operation{lhs: Box::new(lhs), 
                                 rhs: Box::new(rhs), 
                                 operator },
    

    <function:Identifier> "(" <arguments:FunctionArgs> ")" 
        => Expression::Call{function, arguments},

    "++" <name:Identifier> 
        => Expression::Prefix{name, 
                              operator: Operator::Plus, 
                              rhs: Box::new(Expression::Int{v: 1}) },
                                
    "--" <name:Identifier>
        => Expression::Prefix{name, 
                              operator: Operator::Minus, 
                              rhs: Box::new(Expression::Int{v: 1}) },
}

pub FunctionArgs: Vec<Expression> = {
    () => vec![],
    <argument:Expression> => vec![argument],
    <argument:Expression> "," <tail:FunctionArgs> => {
        let mut args = tail.clone();
        args.insert(0, argument);

        args
    }
}

pub ExpressionList: Vec<ListItem> = {
    () => vec![],
    <pack:".."?> <head:Expression> <spread:".."?> => vec![ListItem{
        expression: head, 
        is_spread: spread.is_some(),
        is_pack: pack.is_some(),
    }],
    <head:Expression> <spread:".."?> "," <tail:ExpressionList> => {
        let mut list = tail.clone();
        list.insert(0, ListItem{
            expression: head, 
            is_spread: spread.is_some(),
            is_pack: false,
        });

        list
    },
}

Operator: Operator = {
    <s:"+">  => Operator::Plus,
    <s:"-">  => Operator::Minus,
    <s:"*">  => Operator::Times,
    <s:"/">  => Operator::Divide,
    <s:"<">  => Operator::LessThan,
    <s:">">  => Operator::GreaterThan,
    <s:"=="> => Operator::Equal,
    <s:"!="> => Operator::NotEqual,
}

AssignmentOperator: Operator = {
    <s:"+="> => Operator::Plus,
    <s:"-="> => Operator::Minus,
    <s:"*="> => Operator::Times,
    <s:"/="> => Operator::Divide,
}

Identifier: String = {
    <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> => s.to_string(),
}

IntLiteral: i32 = {
    <s:r"[0-9]+"> => s.parse().unwrap(),
}

FloatLiteral: f64 = {
    <s:r"[0-9]+[.][0-9]+"> => s.parse().unwrap(),
}

StringLiteral: String = {
    <s:r#""[^\"]*""#> => s.replace('"', "").to_string(),
}

BooleanLiteral: bool = {
    <s:"true"> => true,
    <s:"false"> => false,
}

CharacterLiteral: char = {
    <s:r#"'[^\']'"#> => s.replace('\'', "").chars().next().expect("invalid char!"),
}

match {
    r"//[^\n\r]*[\n\r]*" => {},
    r"\s*" => {},
    _,
}